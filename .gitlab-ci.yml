# CI Workflow for MFC running Ascent @ ORNL through GitLab.

# GitLab: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
#  - User Set:
#    - $GIT_STRATEGY: none -> Runner should not clone repository before executing script
#  - User Read:
#    - $CI_PROJECT_NAME    -> e.g MFC, MFC-develop, ...
#    - $CI_REPOSITORY_URL  -> e.g https://gitlab-ci-token:[MASKED]@code.ornl.gov/ecpcitest/cfd154/MFC-develop.git
#    - $CI_COMMIT_REF_SLUG -> e.g GPU, master, v4.0.0, hypoelastic, ...
# ORNL's Ascent:
#  - User Set:
#    - $SCHEDULER_PARAMETERS
#  - User Read:
#    - $MEMBERWORK -> e.g /gpfs/wolf/scratch/henrylb


stages:
  - main


# Variables for all jobs
variables:
  # Tell runner to not clone MFC
  GIT_STRATEGY: none
  # Ascent Job Scheduler parameters
  SCHEDULER_PARAMETERS: "-P CFD154 -nnodes 1 -W 00:30"


# This script runs before each job's main script is executed.
# It defines useful environment variables used at runtime.
before_script:
  # Check "$CI_PROJECT_NAME" contains "MFC" so we are sure
  # we won't clone into or delete from an unsuspecting directory
  # due to an unfortunate error.
  - echo "[CI] Running in $(pwd):"
  - if [[ ! "$CI_PROJECT_NAME" == *"MFC"* ]]; then exit 1; fi;

  # (Tidy) Delete clones/builds on the same branch older than 10 days
  - echo "Removing:"
  - export CI_MFC_BRANCH_DIR="$MEMBERWORK/cfd154/.ci/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG"
  - mkdir -p "$CI_MFC_BRANCH_DIR"
  - find "$CI_MFC_BRANCH_DIR" -mindepth 1 -maxdepth 1 -type d -mtime +10 | sed s/^/\ -\ Removing\ /g
  - find "$CI_MFC_BRANCH_DIR" -mindepth 1 -maxdepth 1 -type d -mtime +10 | xargs rm -rf

  # Define MFC directory path
  - CI_MFC_DIR="$CI_MFC_BRANCH_DIR/$CI_COMMIT_SHORT_SHA"


.clone:
  stage: main
  script:
    # Clean MFC directory if it exists (from a previous run)
    - if [ -d "$CI_MFC_DIR/$JOB_MODE" ]; then rm -rf "$CI_MFC_DIR/$JOB_MODE"; fi 
    
    # Clone MFC into MFC directory & cd into it
    - mkdir -p "$CI_MFC_DIR/$JOB_MODE/"
    - git clone --single-branch --branch "$CI_COMMIT_REF_NAME" "$CI_REPOSITORY_URL" "$CI_MFC_DIR/$JOB_MODE/"
  tags:
    - nobatch

.build:
  stage: main
  script:
    - cd "$CI_MFC_DIR/$JOB_MODE" && echo "[CI] Building in $(pwd):"
    - . ./mfc.sh load -c a -m $(if [ "$(echo "$JOB_MODE" | grep -i 'cpu' | wc -c)" -gt 0 ]; then echo "c"; else echo "g"; fi)
    - ./mfc.sh build -j 8 $FLAGS
  tags:
    - nobatch

.test:
  stage: main
  script:
    - cd "$CI_MFC_DIR/$JOB_MODE" && echo "[CI] Running in $(pwd):"
    - . ./mfc.sh load -c a -m $(if [ "$(echo "$JOB_MODE" | grep -i 'cpu' | wc -c)" -gt 0 ]; then echo "c"; else echo "g"; fi)
    - ./mfc.sh test -j 8
  tags:
    - batch

.bench:
  stage: main
  script:
    - cd "$CI_MFC_DIR/$JOB_MODE" && echo "[CI] Running in $(pwd):"
    - . ./mfc.sh load -c a -m $(if [ "$(echo "$JOB_MODE" | grep -i 'cpu' | wc -c)" -gt 0 ]; then echo "c"; else echo "g"; fi)
    - ./mfc.sh bench
set -e
    - git config --global user.name  'MFC Action'
    - git config --global user.email '<>'
    - git clone "${{ secrets.DOC_PUSH_URL }}" ../www
    - rm -rf ../www/*
    - mv build/install/docs/mfc/* ../www/
    - git -C ../www add -A
    - git -C ../www commit -m "Docs @ ${GITHUB_SHA::7}" || true
    - git -C ../www push


  tags:
    - batch


clone-cpu:
  variables:
    JOB_MODE: "cpu"
  extends: .clone

build-cpu:
  variables:
    FLAGS: ""
    JOB_MODE: "cpu"
  extends: .build
  needs:
    - clone-cpu

test-cpu:
  variables:
    JOB_MODE: "cpu"
  extends: .test
  needs:
    - build-cpu

clone-gpu:
  variables:
    JOB_MODE: "gpu"
  extends: .clone

build-gpu:
  variables:
    FLAGS: "--gpu"
    JOB_MODE: "gpu"
  extends: .build
  needs:
    - clone-gpu

test-gpu:
  variables:
    JOB_MODE: "gpu"
  extends: .test
  needs:
    - build-gpu

bench-cpu:
  variables:
    JOB_MODE: "cpu"
  extends: .bench
  needs:
    - test-cpu

bench-gpu:
  variables:
    JOB_MODE: "gpu"
  extends: .bench
  needs:
    - test-gpu
